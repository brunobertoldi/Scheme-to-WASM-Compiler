use ast::{self, SExpr};

grammar;

pub SExpr: SExpr = {
    "'|quote" => SExpr::Quote,
    "if" => SExpr::If,
    "(" <SExpr*> ")" => SExpr::List(<>),
    "(" <b:SExpr*> "." <a:SExpr> ")" => SExpr::DottedList(b, Box::new(a)),
    Bool => SExpr::Bool(<>),
    Number => SExpr::Number(<>),
    Str => SExpr::String(<>),
    Ident => SExpr::Ident(<>),
};

Bool: bool = {
   "#t" => true,
   "#f" => false,
};

Number: ast::Number = {
    r"[\+\-]?[0-9]+" => ast::Number::Exact(<>.parse().unwrap()),
    r"[\+\-]?[0-9]+\.[0-9]+" => ast::Number::Inexact(<>.parse().unwrap()),
};

Str: String = {
    str_lit => <>[1..<>.len()-1].replace(r"\\", r"\").replace(r#"\""#, "\""),
};

Ident: String = {
    "+" => <>.to_owned(),
    "-" => <>.to_owned(),
    "..." => <>.to_owned(),
    ident => <>.to_lowercase(),
};

match {
    r"(?i)'|quote" => "'|quote",
    r"(?i)if" => "if",
    r"(?i)#t" => "#t",
    r"(?i)#f" => "#f",
    r"[\+\-]?[0-9]+",
    r"[\+\-]?[0-9]+\.[0-9]+",
    r#""(\\\\|\\"|[^\\"])*""# => str_lit,
} else {
    r"[a-zA-Z!\$%\*/:<=>\?~_\^][a-zA-Z!\$%\*/:<=>\?~_\^0-9\.\+\-]*" => ident,
    _
}
